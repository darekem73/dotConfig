#!/bin/bash
FINISHED_MARK=/tmp/finished
END_MARK=/tmp/end

_TITLE=`echo "$QUTE_URL" | awk '{split($0,tab,"/"); title=tab[length(tab)]; sub(/#/,"",title); print title}'`
TITLE=`echo $_TITLE | sed -r 's/\ +/_/g'`
[ -n "$TITLE" ] && LOG="/tmp/scanlog-$$-$TITLE.log" || LOG=/tmp/scanlog.$$

#LOG=/tmp/scanlog.log

: > $LOG
NUM_PAGES=`cat "$QUTE_TEXT" | awk '/^PAGE [0-9]+ OF [0-9]+/ {print $NF}'`
INIT_PAGE=1
[ $# -eq 1 ] && INIT_PAGE=$1

is_end() {
	: > $END_MARK
}

is_finished() {
	: > $FINISHED_MARK
}

random() {
	local _mul="$1"
	[ -z "$1" ] && _mul=1
	r=$(( $RANDOM % 20000 + 10000 ))
	(( r=$r*$_mul/100 ))
	echo "0."$r
}

sleep_random() {
	local _mul=$1
	[ -z "$1" ] && _mul=1
	local _time=$(random $_mul)
	log "Random sleep: $_time"
	sleep $_time
}

notify() {
	notify-send -t $1 -u $2 "$3"
}

log() {
	echo "$1" >> $LOG
}

filename() {
	local _title="$1"
	local _page="$2"
	echo "/tmp/`date +"%Y-%m-%d_%H-%M-%S"`-"$_title"-$_page.png"
}

size_of() {
	local _filename="$1"
	echo $(find $_filename -printf "%s")
}

compare() {
	log "Comparing: $1 $2"
	res=`cmp "$1" "$2" >/dev/null && echo same  || echo diff`
	log "$res"
	echo $res
}

scan() {
	local _filename="$1"
	log "Scanning: $_filename"
	echo "screenshot --force $_filename" >> "$QUTE_FIFO"
	sleep_random 1
	last_size=$(size_of "$_filename")
	log "File size (1): $last_size"
	sleep_random 1
	next_size=$(size_of "$_filename")
	log "File size (2): $next_size"
	while [ $last_size -ne $next_size ]; do
		log "File sizes differ: $last_size $next_size"
		last_size=$next_size
		sleep_random 1
		next_size=$(size_of "$_filename")
		log "File size (2): $next_size"
	done
}

robust_scan() {
	local _filename="$1"
	local prev=/tmp/1.png
	local next=/tmp/2.png
	log "scan $prev"
	scan "$prev"
	sleep_random 3
	sleep_random 3
	log "scan $next"
	scan "$next"
	while [[ "$(compare "$prev" "$next")" == "diff" ]]; do
		log "SIZE: `size_of "$prev"` `size_of "$next"`"
		log "MD5: `md5sum "$prev"` `md5sum "$next"`"
		cp $next $prev
		sleep_random 3
		sleep_random 3
		log "repeating scan to: $next"
		scan "$next"
	done
	log "moving robust_scan to $_filename"
	cp "$next" "$_filename"
}

next_page() {
	echo "hint page" >> "$QUTE_FIFO"
	sleep_random 1
	echo "hint-follow a" >> "$QUTE_FIFO"
}

if [ -z "$NUM_PAGES" ] || [ -z "$TITLE" ]; then
	log "Not a book: $QUTE_URL"
	
	is_end
	
	#notify 1000 critical "Not a book?"
	exit 1
fi

cdown=3
while [ $cdown -gt 0 ]; do
	notify 700 low "$cdown"
	(( cdown=$cdown-1 ))
	sleep 1
done

is_scanning

log "START: $TITLE ($NUM_PAGES pages)"
notify 1000 normal "Scanning started: $TITLE (pages: $NUM_PAGES)"
(( guard=$NUM_PAGES*3 ))
log "Initial page number: $INIT_PAGE"
count=$INIT_PAGE
last=
while true; do
	next=$(filename "$TITLE" $count)
	log "Robust scan to: $next"
	robust_scan "$next"
	notify 700 low "Scanned page: $count/$NUM_PAGES"
	(( count=$count+1 ))
	if [ -z "$last" ]; then
		log "First time priming $next for comparison with next page"
		last=$next
	else
		log "Comparing files: $last $next for potential end of book"
		if [[ "$(compare "$last" "$next")" == "same" ]]; then
			log "Same page robust_scanned; last?"
			#notify 100 critical "WARNING: Check if scanning finished"
			break
		else
			log "Priming $next for comparison with next page"
			last=$next
		fi
	fi
	sleep_random 2
	log "Next page: $count"
	next_page
	sleep_random 3
	sleep_random 3
	(( guard=$guard-1 ))
	if [ $guard -le 0 ]; then
		log "BREAKING due to guard"
		#notify 100 critical "ERROR: Guard reached in book: $TITLE"

		is_finished
		
		exit 1
	fi
done
notify 2000 normal "Scanning finished: $TITLE"
log "END: $TITLE ($count pages)"

is_finished

exit 0
