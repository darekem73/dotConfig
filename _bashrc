# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
export PROMPT_COMMAND='history -a'
export HISTTIMEFORMAT='%F %T '
#HISTSIZE=1000
HISTCONTROL=ignoredups
HISTSIZE=-1
HISTFILESIZE=-1
#HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

export TERM=xterm-256color
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
    linux) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# GIT
parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

parse_git_status() {
	TMP_FILE=/tmp/_git-bash.$$
	git status --porcelaine --branch > $TMP_FILE
	remote_url=$(git config --get remote.origin.url | sed 's|^.*//||; s/.*@//; s/[^:/]\+[:/]//; s/.git$//')


	rm $TMP_FILE
}

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\n\$ '
    #PS1='${debian_chroot:+($debian_chroot)}\[\033[01;34m\][\w]\[\033[00m\]\n\[\e[91m\]$(parse_git_branch)\[\e[00m\]\$ '
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;34m\][\w]\n\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export NNN_EDITOR=vim
export NNN_PLUG='f:fzcd;o:fzopen;h:fzhist;i:imgview;r:dragdrop;b:bookmarks;d:diffs;l:launch;u:dups;w:wdiffs'
#export NNN_COLORS='#04050a0d;1234'
export NNN_COLORS='#04010203;1234'
export NNN_FCOLORS='c1e2272e006033f7c6d6abc4'
export BOOKMARKS_DIR=/home/darek/.config/nnn/bookmarks
#Order 	Hex 	Color
#Block device 	c1 	DarkSeaGreen1
#Char device 	e2 	Yellow1
#Directory 	27 	DeepSkyBlue1
#Executable 	2e 	Green1
#Regular 	00 	Normal
#Hard link 	60 	Plum4
#Symbolic link 	33 	Cyan1
#Missing OR file details 	f7 	Grey62
#Orphaned symbolic link 	c6 	DeepPink1
#FIFO 	d6 	Orange1
#Socket 	ab 	MediumOrchid1
#Unknown OR 0B regular/exe 	c4 	Red1
export EDITOR="vim"
export TERMINAL="st"
export BROWSER="qutebrowser"
#export QT_SCALE_FACTOR=0.50
#export QT_QPA_PLATFORMTHEME=gtk2
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_SCALE_FACTOR="1.0"
TZ='Europe/Warsaw'; export TZ

n()
{
    nnn "$@"

    NNN_TMPFILE=${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd

    if [ -f $NNN_TMPFILE ]; then
            . $NNN_TMPFILE
            rm -f $NNN_TMPFILE > /dev/null
    fi
}

PATH="$( find $HOME/.scripts -type d -printf ":%p" )${PATH:+:${PATH}}"; export PATH;
#PATH="/home/darek/perl5/bin${PATH:+:${PATH}}"; export PATH;
#PERL5LIB="/home/darek/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
#PERL_LOCAL_LIB_ROOT="/home/darek/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
#PERL_MB_OPT="--install_base \"/home/darek/perl5\""; export PERL_MB_OPT;
#PERL_MM_OPT="INSTALL_BASE=/home/darek/perl5"; export PERL_MM_OPT;
export BC_ENV_ARGS=$HOME/.bcrc

if [[ $TERM = "xterm-256color" ]] && [[ $(ps -p $PPID -o comm=) = "tmux: server" ]]; then
	LOGDIR=.
	DATE=`date +"%Y-%m-%d_%H-%M-%S"`
	MYTTY=$(tty)
	ISLOGGED=$(for s in $(tmux list-sessions -F '#{session_name}'); do
    		tmux list-panes -F '#{pane_tty} #{session_name}' -t "$s"
	done | grep $MYTTY | awk '{print $2}' | cut -d- -f1)
	if [[ $ISLOGGED = "logged" ]]; then
		#mkdir $HOME/logs 2> /dev/null
		logname="$DATE.tmux.log"
		script -f $LOGDIR/${logname}
		exit
	fi
fi

if [ -f "$HOME/Downloads/bash-git-prompt/gitprompt.sh" ]; then
    GIT_PROMPT_ONLY_IN_REPO=1
    # GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status
    # GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules
    GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments
  
    # GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch
    # GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files
  
    # GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files
  
    # GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10
  
    # GIT_PROMPT_START=...    # uncomment for custom prompt start sequence
    # GIT_PROMPT_END=...      # uncomment for custom prompt end sequence

    # GIT_PROMPT_THEME="Evermeet" # needed for reload optimization, should be unique
    GIT_PROMPT_THEME_FILE=$HOME/.config/GitTheme.bgptheme
    source $HOME/Downloads/bash-git-prompt/gitprompt.sh
fi

